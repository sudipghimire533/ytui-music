use super::attachments;
use super::common;
use serde::Deserialize;

// type structure are referenced from:
// https://docs.invidious.io/api/channels_endpoint/#get-apiv1channelsidcommunity

/*
* ChannelId response
{
    "author": String,
    "authorId": String,
    "authorUrl": String,
    "authorVerified": Boolean,
    "authorBanners": [
        // One or more ImageObject
    ],
    "authorThumbnails": [
        // One or more ImageObject
    ],

    "subCount": Number, // Integer
    "totalViews": Number, // Integer
    "joined": Number, // Unix timestamp

    "autoGenerated": Boolean,
    "isFamilyFriendly": Boolean,

    "description": String,
    "descriptionHtml": String,
    "allowedRegions": String[],

    "tabs": String[],

    "latestVideos": [
        // One or more VideoObject
    ],
    "relatedChannels": [
        // One or more ChannelObject
    ]
}
*/
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ChannelInfo {
    pub author: String,
    pub author_id: String,
    pub author_url: String,
    pub author_verified: bool,
    pub author_banners: Vec<common::ImageObject>,
    pub author_thumbnails: Vec<common::ImageObject>,

    pub sub_count: i64,
    pub total_views: i64,
    pub joined: i64,

    pub auto_generated: bool,
    pub is_family_friendly: bool,

    pub description: String,
    pub description_html: String,
    pub allowed_regions: Vec<String>,

    pub tabs: Vec<String>,
    pub tags: Vec<String>,

    pub latest_videos: Vec<common::VideoObject>,
    pub related_channels: Vec<common::ChannelObject>,
}

/*
RelatedChannels
{
    "relatedChannels": [
        // One or more ChannelObject
    ],
    "continuation": String
}
*/
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct RelatedChannels {
    pub related_channels: Vec<common::ChannelObject>,
    pub continuation: String,
}

/*
* ChannelPlaylist
{
    "playlists": [
        // One or more PlaylistOject
    ],
    "continuation": continuation
}
*/

#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ChannelPlaylist {
    pub playlists: Vec<common::PlaylistObject>,
    pub continuation: String,
}

/*
ChannelVideos
{
    "videos": [
        // One or more VideoObject
    ],
    "continuation": String
}
*/
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ChannelVideos {
    pub videos: Vec<common::VideoObject>,
    pub continuation: String,
}

/*
CommunityComments
    {
        "attachment": ImageAttachment | MultiImageAttachment | VideoAttachment | PollAttachment | PlaylistAttachment
        "author": String,
        "authorIsChannelOwner": Boolean
        "authorId": String,
        "authorThumbnails": ImageObject[],
        "authorUrl": String,
        "commentId": String,
        "content": String,
        "contentHtml": String,
        "isEdited": Boolean,
        "likeCount": Number,
        "published": Number,
        "publishedText": String,
        "replyCount": Number
    }
*/
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CommunityComment {
    pub attachment: attachments::Attachment,
    pub author: String,
    pub author_is_channel_owner: bool,
    pub author_id: String,
    pub author_thumbnails: Vec<common::ImageObject>,
    pub author_url: String,
    pub comment_id: String,
    pub content: String,
    pub content_html: String,
    pub is_edited: bool,
    pub like_count: i64,
    pub published: i64,
    pub published_text: String,
    pub reply_count: i64,
}

/*
ChannelCommunity
{
    "authorId": String,
    "comments": {
        "attachment": ImageAttachment | MultiImageAttachment | VideoAttachment | PollAttachment | PlaylistAttachment
        "author": String,
        "authorIsChannelOwner": Boolean
        "authorId": String,
        "authorThumbnails": ImageObject[],
        "authorUrl": String,
        "commentId": String,
        "content": String,
        "contentHtml": String,
        "isEdited": Boolean,
        "likeCount": Number,
        "published": Number,
        "publishedText": String,
        "replyCount": Number
    }[]
}
*/
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ChannelCommunity {
    pub author: String,
    pub commonts: Vec<CommunityComment>,
}

/*
{
    type: "channel",
    author: String,
    authorId: String,
    authorUrl: String,

    authorThumbnails: [
      {
        url: String,
        width: Int32,
        height: Int32
      }
    ],
    autoGenerated: Bool
    subCount: Int32,
    videoCount: Int32,
    description: String,
    descriptionHtml: String
  }
*/
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SearchChannelUnit {
    #[serde(rename = "type")]
    pub o_type: String,
    pub author: String,
    pub author_id: String,
    pub author_url: String,
}
